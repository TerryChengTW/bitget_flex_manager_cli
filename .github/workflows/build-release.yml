name: Build and Release

on:
  push:
    tags: ['v*']

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            artifact_name: bitget-flex-manager-cli-windows.zip
          - os: macos-latest
            artifact_name: bitget-flex-manager-cli-macos.app

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable
      shell: bash
      run: |
        cd src
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          # Windows: 建立.exe檔案然後打包成.zip
          pyinstaller --onefile --console bg_flex_manager_cli.py --name bitget-flex-manager-cli
          
          # 建立Windows發布目錄
          mkdir -p windows-release
          cp dist/bitget-flex-manager-cli.exe windows-release/
          cp bg_key_example.json windows-release/
          
          # 建立使用說明
          echo "# Bitget Flex Manager CLI - Windows" > windows-release/README.txt
          echo "" >> windows-release/README.txt
          echo "1. 雙擊 bitget-flex-manager-cli.exe 執行程式" >> windows-release/README.txt
          echo "2. 第一次執行時程式會要求選擇配置檔案" >> windows-release/README.txt
          echo "3. 可以使用 bg_key_example.json 作為範本建立你的配置檔案" >> windows-release/README.txt
          echo "4. 在配置檔案中填入你的 Bitget API 資訊" >> windows-release/README.txt
          
          # 建立.zip檔案 (使用 PowerShell)
          powershell -Command "Compress-Archive -Path 'windows-release/*' -DestinationPath 'bitget-flex-manager-cli-windows.zip' -Force"
          
          # 移動.zip到dist目錄
          mv bitget-flex-manager-cli-windows.zip dist/
        else
          # macOS: 先建立可執行檔
          pyinstaller --onefile --console bg_flex_manager_cli.py --name bitget-flex-manager-cli
          
          # 創建.app bundle結構
          mkdir -p "bitget-flex-manager-cli.app/Contents/MacOS"
          mkdir -p "bitget-flex-manager-cli.app/Contents/Resources"
          
          # 移動可執行檔到.app中
          mv dist/bitget-flex-manager-cli "bitget-flex-manager-cli.app/Contents/MacOS/bitget-flex-manager-cli-bin"
          
          # 複製配置範本到Resources目錄
          cp bg_key_example.json "bitget-flex-manager-cli.app/Contents/Resources/"
          
          # 創建啟動shell script
          echo '#!/bin/bash' > "bitget-flex-manager-cli.app/Contents/MacOS/bitget-flex-manager-cli"
          echo 'cd "$(dirname "$0")"' >> "bitget-flex-manager-cli.app/Contents/MacOS/bitget-flex-manager-cli"
          echo 'open -a Terminal.app ./bitget-flex-manager-cli-bin' >> "bitget-flex-manager-cli.app/Contents/MacOS/bitget-flex-manager-cli"
          chmod +x "bitget-flex-manager-cli.app/Contents/MacOS/bitget-flex-manager-cli"
          
          # 創建Info.plist
          echo '<?xml version="1.0" encoding="UTF-8"?>' > "bitget-flex-manager-cli.app/Contents/Info.plist"
          echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> "bitget-flex-manager-cli.app/Contents/Info.plist"
          echo '<plist version="1.0"><dict>' >> "bitget-flex-manager-cli.app/Contents/Info.plist"
          echo '<key>CFBundleExecutable</key><string>bitget-flex-manager-cli</string>' >> "bitget-flex-manager-cli.app/Contents/Info.plist"
          echo '<key>CFBundleIdentifier</key><string>com.bitget.flex-manager-cli</string>' >> "bitget-flex-manager-cli.app/Contents/Info.plist"
          echo '<key>CFBundleName</key><string>Bitget Flex Manager CLI</string>' >> "bitget-flex-manager-cli.app/Contents/Info.plist"
          echo '<key>CFBundleVersion</key><string>1.0.0</string>' >> "bitget-flex-manager-cli.app/Contents/Info.plist"
          echo '</dict></plist>' >> "bitget-flex-manager-cli.app/Contents/Info.plist"
          
          # 移動.app到dist目錄
          mv bitget-flex-manager-cli.app dist/
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.os == 'windows-latest' && 'src/dist/bitget-flex-manager-cli-windows.zip' || 'src/dist/bitget-flex-manager-cli.app' }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    permissions:
      contents: write
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Package macOS app  
      run: |
        if [ -d "bitget-flex-manager-cli-macos.app" ]; then
          echo "Found .app bundle, ensuring proper permissions..."
          # 確保所有執行檔都有正確權限
          chmod +x bitget-flex-manager-cli-macos.app/Contents/MacOS/*
          
          echo "Skipping code signing (not available on Linux runner)..."
          
          echo "Creating installation script..."
          echo '#!/bin/bash' > install-macos.sh
          echo 'echo "🍎 Bitget Flex Manager CLI - macOS Installer"' >> install-macos.sh
          echo 'echo "Removing quarantine attribute..."' >> install-macos.sh
          echo 'xattr -rd com.apple.quarantine bitget-flex-manager-cli-macos.app 2>/dev/null || echo "No quarantine attribute found"' >> install-macos.sh
          echo 'echo "Setting proper permissions..."' >> install-macos.sh
          echo 'chmod +x bitget-flex-manager-cli-macos.app/Contents/MacOS/*' >> install-macos.sh
          echo 'echo "✅ Installation complete! You can now double-click the .app to run."' >> install-macos.sh
          chmod +x install-macos.sh
          
          echo "Adding config template to package..."
          cp bitget-flex-manager-cli-macos.app/Contents/Resources/bg_key_example.json .
          
          echo "Creating tar.gz archive (preserves permissions)..."
          tar -czf bitget-flex-manager-cli-macos.tar.gz bitget-flex-manager-cli-macos.app install-macos.sh bg_key_example.json
          ls -la *.tar.gz
        else
          echo "No .app bundle found"
        fi

    - name: Checkout source for config template
      uses: actions/checkout@v4
      with:
        path: source
      
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          **/*.zip
          *.tar.gz
        generate_release_notes: true